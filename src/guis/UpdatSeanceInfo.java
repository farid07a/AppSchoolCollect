/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guis;

import datechooser.SelectedDate;
import domaine.Matiere;
import domaine.Seance;
import java.sql.Connection;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAdjusters;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import main.java.com.school.impl.SeanceDAOImpl;
import main.java.com.school.model.config.ConnectionDB;
import main.java.com.school.model.config.DatabaseConnectionException;

/**
 *
 * @author farid
 */
public class UpdatSeanceInfo extends javax.swing.JDialog {

    /**
     * Creates new form UpdateFormSeance
     */
    SeanceDAOImpl seance_dao_imp;
    Seance seance;
    public UpdatSeanceInfo(java.awt.Frame parent, boolean modal,Seance seance) {
        super(parent, modal);
        initComponents();
        this.seance=seance;
        this.preparingUI();
        this.setLocationRelativeTo(null);
        txt_dat_first_seance.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changeDateOfDays();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                //  changeDateOfDays();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                changeDateOfDays();
            }

        });
    
    }
    
    public void changeDateOfDays() {

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        LocalDate date = LocalDate.parse(txt_dat_first_seance.getText(), formatter);
        
        JOptionPane.showMessageDialog(null, date.getDayOfWeek().getValue());
        
        
        LocalDate dat_next;
        if (date.getDayOfWeek().equals(DayOfWeek.SUNDAY)) {
            dat_next = date;
            lab_date_1.setText(dat_next.format(formatter) + "");
            //lab_date_1.setText(dat_next + "");
        } else {

            dat_next = date.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));
            //lab_date_1.setText(dat_next.format(formatter) + "");
            lab_date_1.setText(dat_next.format(formatter) + "");
        }
    }
    
    public void preparingUI(){
        jLabel1.setText(this.seance.getId()+"");
        pan_time_sund.setbignTime(seance.getTimeSeance().toString());
        pan_time_sund.setfinTime(seance.getFinTime().toString());
        com_days.setSelectedItem(seance.getDay_sceance());
        SelectedDate slcDate=new SelectedDate(this.seance.getDate_sceance().getDayOfMonth(),
        this.seance.getDate_sceance().getMonthValue(),this.seance.getDate_sceance().getYear());
        dateChooser.setSelectedDate(slcDate);
        //check_sund.setText(seance.getDay_sceance());
        //lab_date_1.setText(seance.getDate_sceance().toString());
    }
    
    public void FullSeanceTable(Matiere matiere){
        try {
            Connection connection =ConnectionDB.getConnection();
            seance_dao_imp=new SeanceDAOImpl(connection);
            List <Seance> list_seance=seance_dao_imp.findAll();
            DefaultTableModel df=new DefaultTableModel();
            for (Seance seance : list_seance) {
                Object [] arg={seance.getId(),seance.getNumSeance(),seance.getTimeSeance(),seance.getFinTime(),seance.getDay_sceance()
                ,seance.getDate_sceance().toString(),seance.isTerminate(),"تحويل"};
                df.addRow(arg);;
                
            }
            
            
        } catch (DatabaseConnectionException ex) {
            Logger.getLogger(UpdatSeanceInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser = new datechooser.DateChooser();
        jPanel1 = new javax.swing.JPanel();
        txt_dat_first_seance = new material.design.TextField();
        buttonRounder19 = new material.design.buttonRounder();
        lab_date_1 = new javax.swing.JLabel();
        pan_time_sund = new material.design.pan_time();
        jLabel1 = new javax.swing.JLabel();
        buttonRounder17 = new material.design.buttonRounder();
        com_days = new material.design.Combobox();

        dateChooser.setTextRefernce(txt_dat_first_seance);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        txt_dat_first_seance.setForeground(new java.awt.Color(204, 0, 51));
        txt_dat_first_seance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_dat_first_seance.setToolTipText("");
        txt_dat_first_seance.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        txt_dat_first_seance.setLabelText("تاريخ أسبوع الدراسة");
        txt_dat_first_seance.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                txt_dat_first_seanceHierarchyChanged(evt);
            }
        });
        txt_dat_first_seance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_dat_first_seanceActionPerformed(evt);
            }
        });
        txt_dat_first_seance.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txt_dat_first_seancePropertyChange(evt);
            }
        });

        buttonRounder19.setBackground(new java.awt.Color(51, 153, 0));
        buttonRounder19.setForeground(new java.awt.Color(255, 255, 255));
        buttonRounder19.setText("حفظ التعديلات");
        buttonRounder19.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        buttonRounder19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRounder19ActionPerformed(evt);
            }
        });

        lab_date_1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lab_date_1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(153, 153, 153)));

        jLabel1.setText("Id_lab");

        buttonRounder17.setBackground(new java.awt.Color(255, 0, 51));
        buttonRounder17.setForeground(new java.awt.Color(255, 255, 255));
        buttonRounder17.setText("إلغاء");
        buttonRounder17.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        buttonRounder17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRounder17ActionPerformed(evt);
            }
        });

        com_days.setForeground(new java.awt.Color(51, 0, 153));
        com_days.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت" }));
        com_days.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        com_days.setLabeText("أيام الاسبوع");
        com_days.setPreferredSize(new java.awt.Dimension(64, 46));
        com_days.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                com_daysItemStateChanged(evt);
            }
        });
        com_days.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                com_daysActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonRounder17, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonRounder19, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(47, 47, 47)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(com_days, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pan_time_sund, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                    .addComponent(lab_date_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_dat_first_seance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(com_days, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pan_time_sund, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lab_date_1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_dat_first_seance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRounder17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRounder19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonRounder17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRounder17ActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonRounder17ActionPerformed

    private void buttonRounder19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRounder19ActionPerformed
        
        LocalTime start_seance = LocalTime.parse(pan_time_sund.getbignTime().substring(0, 5));
        LocalTime end_seance = LocalTime.parse(pan_time_sund.getfinTime().substring(0, 5));
        
        String DayName=com_days.getSelectedItem().toString();
        //dateChooser.setDateFormat(DayName);
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        txt_dat_first_seance.setText(this.seance.getDate_sceance().format(formatter));
        SelectedDate slcDate=new SelectedDate(this.seance.getDate_sceance().getDayOfMonth(),
                this.seance.getDate_sceance().getMonthValue(),this.seance.getDate_sceance().getYear());
        dateChooser.setSelectedDate(slcDate);
        
        
        
        LocalDate next_date = LocalDate.parse(txt_dat_first_seance.getText(), formatter);
        
        
        if (this.seance.getDate_sceance().getDayOfWeek().getValue()<next_date.getDayOfWeek().getValue()&&
                 ChronoUnit.DAYS.between(this.seance.getDate_sceance(), next_date)<7){
            
            JOptionPane.showMessageDialog(null, "Successfu Update Seance in this week");
            
        }else {
            JOptionPane.showMessageDialog(null, "YOU CANNOT CHANGE Day You maust change in the next week");
        
        }
        
//
//        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
//        if (Integer.valueOf(NbrSeanceInSemaine_db.getText()) == 0
//            || (!Objects.equals(Integer.valueOf(NbrSeanceInSemaine_db.getText()), Integer.valueOf(lab_nbr_seance.getText())))) {
//            JOptionPane.showMessageDialog(null, "Error in Number Seance please check it");
//            return;
//        }
//
//        if (com_matiere.getSelectedIndex() != -1 && !txt_dat_first_seance.getText().isEmpty() && !lab_nbr_seance.getText().equals("0")) {
//            Matiere matiere = new MatiereDAOImpl(connection).getMatiereNiveauOfCategory(com_matiere.getSelectedItem().toString(),
//                comb_niveau.getSelectedItem().toString(), com_catego_niveau.getSelectedItem().toString());
//            JOptionPane.showMessageDialog(null, "" + matiere.getId());
//            SeanceDAOImpl sceanceDAOImpl = new SeanceDAOImpl(connection);
//            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
//            //  DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
//            java.util.Date debu_seance;
//            java.util.Date fin_seance;
//            int num_seance = 1;
//            List<Seance> listSceance = new ArrayList<>();
//
//            try {
//                if (check_sund.isSelected()) {
//                    LocalDate date = LocalDate.parse(lab_date_1.getText(), formatter);
//
//                    debu_seance = sdf.parse(pan_time_sund.getbignTime());
//                    fin_seance = sdf.parse(pan_time_sund.getfinTime());
//
//                    LocalTime start_seance = LocalTime.parse(pan_time_sund.getbignTime().substring(0, 5));
//                    LocalTime end_seance = LocalTime.parse(pan_time_sund.getfinTime().substring(0, 5));
//
//                    Seance seance_1 = new Seance(0, num_seance, start_seance, end_seance,
//                        check_sund.getText(), date, false, matiere);
//                    if (sceanceDAOImpl.save(seance_1) > 0) {
//                        listSceance.add(seance_1);
//                    }
//                    //                    seance_1 = sceanceDAOImpl.getlast();//m this return Sceance with Id != 0 //0 not id seance_1(id:0,num==ok ,....)
//                    //
//                    //                    Seance_Matiere seance_Matiere = new Seance_Matiere(0, seance_1, matiere, false,date);
//                    //                    new SeanceMatiereDAOImpl(connection).save(seance_Matiere);
//                }
//                // الاثين
//                if (chec_mond.isSelected()) {
//                    LocalDate date = LocalDate.parse(lab_date_2.getText(), formatter);
//
//                    num_seance = num_seance + 1;
//                    debu_seance = sdf.parse(pan_time_mond.getbignTime());
//                    fin_seance = sdf.parse(pan_time_mond.getfinTime());
//                    LocalTime start_seance = LocalTime.parse(pan_time_sund.getbignTime().substring(0, 5));
//                    LocalTime end_seance = LocalTime.parse(pan_time_sund.getfinTime().substring(0, 5));
//
//                    Seance seance_2 = new Seance(0, num_seance, start_seance, end_seance,
//                        chec_mond.getText(), date, false, matiere);
//
//                    //sceanceDAOImpl.save(seance_2);
//                    if (sceanceDAOImpl.save(seance_2) > 0) {
//                        listSceance.add(seance_2);
//                    }
//
//                    //seance_2 = sceanceDAOImpl.getlast();//m this return Sceance with Id != 0 //0 not id seance_1(id:0,num==ok ,....)
//                }
//                if (check_tues.isSelected()) {
//                    LocalDate date = LocalDate.parse(lab_date_3.getText(), formatter);
//
//                    num_seance = num_seance + 1;
//                    debu_seance = sdf.parse(pan_time_tuesd.getbignTime());
//                    fin_seance = sdf.parse(pan_time_tuesd.getfinTime());
//
//                    LocalTime start_seance = LocalTime.parse(pan_time_sund.getbignTime().substring(0, 5));
//                    LocalTime end_seance = LocalTime.parse(pan_time_sund.getfinTime().substring(0, 5));
//
//                    Seance seance_3 = new Seance(0, num_seance, start_seance, end_seance,
//                        check_tues.getText(), date, false, matiere);
//                    sceanceDAOImpl.save(seance_3);
//
//                    if (sceanceDAOImpl.save(seance_3) > 0) {
//                        listSceance.add(seance_3);
//                    }
//
//                }
//                if (check_wed.isSelected()) {
//                    LocalDate date = LocalDate.parse(lab_date_4.getText(), formatter);
//
//                    num_seance = num_seance + 1;
//                    debu_seance = sdf.parse(pan_time_wednesd.getbignTime());
//                    fin_seance = sdf.parse(pan_time_wednesd.getfinTime());
//                    LocalTime start_seance = LocalTime.parse(pan_time_sund.getbignTime().substring(0, 5));
//                    LocalTime end_seance = LocalTime.parse(pan_time_sund.getfinTime().substring(0, 5));
//
//                    Seance seance_4 = new Seance(0, num_seance, start_seance, end_seance,
//                        check_wed.getText(), date, false, matiere);
//                    //sceanceDAOImpl.save(seance_4);
//                    if (sceanceDAOImpl.save(seance_4) > 0) {
//                        listSceance.add(seance_4);
//                    }
//                }
//                if (check_thurs.isSelected()) {
//                    LocalDate date = LocalDate.parse(lab_date_5.getText(), formatter);
//
//                    num_seance = num_seance + 1;
//                    debu_seance = sdf.parse(pan_time_theursd.getbignTime());
//                    fin_seance = sdf.parse(pan_time_theursd.getfinTime());
//                    LocalTime start_seance = LocalTime.parse(pan_time_sund.getbignTime().substring(0, 5));
//                    LocalTime end_seance = LocalTime.parse(pan_time_sund.getfinTime().substring(0, 5));
//
//                    Seance seance_5 = new Seance(0, num_seance, start_seance, end_seance,
//                        check_thurs.getText(), date, false, matiere);
//                    //sceanceDAOImpl.save(seance_5);
//                    if (sceanceDAOImpl.save(seance_5) > 0) {
//                        listSceance.add(seance_5);
//                    }
//                }
//
//                if (check_frid.isSelected()) {
//                    LocalDate date = LocalDate.parse(lab_date_6.getText(), formatter);
//                    num_seance = num_seance + 1;
//                    debu_seance = sdf.parse(pan_time_frid.getbignTime());
//                    fin_seance = sdf.parse(pan_time_frid.getfinTime());
//                    LocalTime start_seance = LocalTime.parse(pan_time_sund.getbignTime().substring(0, 5));
//                    LocalTime end_seance = LocalTime.parse(pan_time_sund.getfinTime().substring(0, 5));
//                    Seance seance_6 = new Seance(0, num_seance, start_seance, end_seance,
//                        check_frid.getText(), date, false, matiere);
//                    if (sceanceDAOImpl.save(seance_6) > 0) {
//                        listSceance.add(seance_6);
//                    }
//
//                }
//                if (check_satur.isSelected()) {
//                    LocalDate date = LocalDate.parse(lab_date_7.getText(), formatter);
//
//                    num_seance = num_seance + 1;
//                    debu_seance = sdf.parse(pan_time_saturd.getbignTime());
//                    fin_seance = sdf.parse(pan_time_saturd.getfinTime());
//                    LocalTime start_seance = LocalTime.parse(pan_time_sund.getbignTime().substring(0, 5));
//                    LocalTime end_seance = LocalTime.parse(pan_time_sund.getfinTime().substring(0, 5));
//                    Seance seance_6 = new Seance(0, num_seance, start_seance, end_seance,
//                        check_satur.getText(), date, false, matiere);
//                    if (sceanceDAOImpl.save(seance_6) > 0) {
//                        listSceance.add(seance_6);
//                    }
//
//                }
//
//                //                int numSceance = Integer.parseInt(lab_nbr_seance.getText());
//                //
//                //                for(int i=0; i<3;i++){
//                    //
//                    //                    for (Seance seance : listSceance) {
//                        //                        seance.setNumSeance(++numSceance);
//                        //                        seance.setDate_sceance(seance.getDate_sceance().plusWeeks(1));
//                        //                        if (sceanceDAOImpl.save(seance)>0)
//                        //                            System.out.println("Success Save");
//                        //                    }
//                    //                }
//            } catch (ParseException ex) {
//                Logger.getLogger(UpdateSeanceForm.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } else {
//            if (com_matiere.getSelectedIndex() == -1) {
//                lab_error_matier.setText("إختر المادة ");
//            }
//            if (txt_dat_first_seance.getText().equals("")) {
//                lab_error_matier.setText("حدد تاريخ بداية الدراسة");
//            }
//            if (lab_nbr_seance.getText().equals("0")) {
//                lab_error_check_day.setText("اختر أيام الدراسة");
//            }
//        }
    }//GEN-LAST:event_buttonRounder19ActionPerformed

    private void com_daysItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_com_daysItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_com_daysItemStateChanged

    private void com_daysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_com_daysActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_com_daysActionPerformed

    private void txt_dat_first_seanceHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_txt_dat_first_seanceHierarchyChanged

    }//GEN-LAST:event_txt_dat_first_seanceHierarchyChanged

    private void txt_dat_first_seanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_dat_first_seanceActionPerformed
        dateChooser.showPopup();
//        if (!txt_dat_first_seance.getText().equals("")) {
//            lab_error_check_day.setText("");
//        }

    }//GEN-LAST:event_txt_dat_first_seanceActionPerformed

    private void txt_dat_first_seancePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txt_dat_first_seancePropertyChange

    }//GEN-LAST:event_txt_dat_first_seancePropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdatSeanceInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdatSeanceInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdatSeanceInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdatSeanceInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UpdatSeanceInfo dialog = new UpdatSeanceInfo(new javax.swing.JFrame(), true,null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private material.design.buttonRounder buttonRounder17;
    private material.design.buttonRounder buttonRounder19;
    private material.design.Combobox com_days;
    private datechooser.DateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lab_date_1;
    private material.design.pan_time pan_time_sund;
    private material.design.TextField txt_dat_first_seance;
    // End of variables declaration//GEN-END:variables
}
